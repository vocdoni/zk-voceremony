#!/bin/bash

GITHUB_REPO="vocdoni/zk-voceremony"

intro_message() {
    echo "

       __     __   ______    ______   _______    ______   __    __  ______                                                                        
      |  \   |  \ /      \  /      \ |       \  /      \ |  \  |  \|      \ 
      | ##   | ##|  ######\|  ######\| #######\|  ######\| ##\ | ## \######
      | ##   | ##| ##  | ##| ##   \##| ##  | ##| ##  | ##| ###\| ##  | ##     
       \##\ /  ##| ##  | ##| ##      | ##  | ##| ##  | ##| ####\ ##  | ##
        \##\  ## | ##  | ##| ##   __ | ##  | ##| ##  | ##| ##\## ##  | ##    
         \## ##  | ##__/ ##| ##__/  \| ##__/ ##| ##__/ ##| ## \#### _| ##_
          \###    \##    ## \##    ##| ##    ## \##    ##| ##  \###|   ## \  
           \#      \######   \######  \#######   \######  \##   \## \######    

                 zk-SNARKs Anonymous Voting Trusted Setup Ceremony 
                                                                        
                                   ,******,*,.                                 
                                   *********,,,,,,,,.                             
                                  *//*********,,,,,,                              
                                  //////**********,.                               
                             .,**///////////*******.                                
                       .*********(((////////////***,,,,,,.                          
                .**************,*((((((((/////////*,,,,,,,,,,,,.                          
          ,********/////////////////((((((((//////,,,,,,,,,,,,.........              
       (/***************///////////*******//(((((/*,,,,,,,,,,,...........,            
       (#(((((/*,***********/..***/************,,,*,,,,,,,,,.......,,,,,,,                
       ((##((((((((/*,,*********,,,,,,,,,,,,,,,,,,,,,,,,,...,******,***,,,          
       #(((((((((((((((((/*,,,,,,,,,,,,,,,,,,,,,,,,...,***********,,,,,,,,           
       #(((((((((((//((((((((///*,.,,,,,,,,,,...,***///**//*,,****,,,,,,,,     
       ##((((((((((((((((//(((((//////*,..,**/////////************,,,,,,,,      
       ##(((((((((((((((((((((///(((////*///////***/***************,,,,,,,      
       ####(((((((((((((((((((//////////*/**//////////****************,,,,      
       ######(((((((((((((((((/(////////*///////////////*****************,      
       (#######(((((((((((((((((////////*///////////////////*************,      
       (#########((((((((((((((((///////*//////////////////////**********,      
       /##########(((((((((((((((((/////*////////////////////////********.      
       /############(((((((((((((((((((/*/////////////////////////*******.      
        /%############((((((((((((((((((*//////////////////////////////.        
             *###########(((((((((((((((//(///((((((((//////////(/.             
                  .########(((((((((((((/((((((((((((((((((((.                  
                       ./#####((((((((((/(((((((((((((((.                       
                             *####((((((/((((((((((.                            
                                  .###((/(((((.                                 
                                        *.
"
    echo
    echo "Welcome to the zk-voceremony contribution process!"
    echo
    echo "To start your contribution you need to provide the following information:"
    echo " - The github repository of the ceremony (by default '$GITHUB_REPO')"
    echo " - Login to your GitHub account (commits will use your github username)"
}


prompt_env_inputs() {
    read -p "Enter the name of the repo (by default '$GITHUB_REPO'): " REPO_URL
    if [ -n "$REPO_URL" ]; then
        GITHUB_REPO=$REPO_URL
    fi

    # list on-going ceremonies
    branches="$(curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$GITHUB_REPO/pulls" \
                | jq '.[].head.ref' | tr -d '"' | grep ^ceremony | sort -u )"
    echo
    echo "Current on-going ceremonies:"
    echo
    echo "$branches"
    echo
    CEREMONY_BRANCH="$(echo "$branches" | head -n 1)"
    read -p "Enter the name of one of the 'on-going' ceremonies and branches shown above (default $CEREMONY_BRANCH): " BRANCH
    if [ -n "$BRANCH" ]; then
        CEREMONY_BRANCH="$BRANCH"
    fi

    echo
    if curl -s -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/$GITHUB_REPO/pulls" \
    | jq '.[].title' | grep Contribution | grep $CEREMONY_BRANCH ; then
      echo "Oops, there's a PR from someone *right now* uploading a contribution to this ceremony, just wait a couple of minutes and try again"
      exit 5
    fi

    echo
    echo "Now you need to login to your GitHub account to authenticate the process."
    echo " - During this process, you will be asked to login to your GitHub account using your browser."
    echo " - The script will try to open your default browser, but it will fail."
    echo " - Don't worry, just copy the URL shown in the terminal and paste it in your browser."
    echo "Then, copy the code shown in the terminal and paste it in the browser."
    echo

    # get the access token
    gh auth login -p https -h github.com -w

    echo
    echo "Okey! Let's start. After you press enter, this script will fork the repo under your username,"
    echo "open a PR against upstream, download required files, let you input your contribution (a random string),"
    echo "and upload it to the PR. Noone else can contribute during this time, so you need to have fast, stable internet connection,"
    echo "else your contribution process will fail due to an automatic timeout after a few minutes."
    echo
    read -p "Press enter to continue..."
    echo

    # clone the ceremony branch, shallow and without LFS (it will be pulled later)
    echo
    echo "Cloning ceremony branch $CEREMONY_BRANCH (this might take a while)..."
    echo
    git config --global lfs.fetchinclude none

    gh repo fork --clone $GITHUB_REPO -- ./ceremony --branch $CEREMONY_BRANCH --depth 2
    cd ./ceremony
    git reset --hard upstream/$CEREMONY_BRANCH # ensure everything is clean (important when fork already existed)

    . ceremony.env
    # set up user identity
    CONTRIBUTOR_NAME="$(gh api user --jq '.login')"
    git config user.name $CONTRIBUTOR_NAME
    git config user.email $CONTRIBUTOR_NAME@users.noreply.github.com

    . /bin/tools.sh
}

check_contribute_env() {
    # get the last contribution zkey file from the contributions file
    if [ ! -f "$CONTRIBUTIONS_FILE" ]; then
        error "contribution file does not exists, is the ceremony initialized?"
        exit 1
    else 
        LAST_CONTRIBUTION_FILE=$(get_last_contribution_file_path)
        LAST_CONTRIBUTION_HASH=$(get_last_contribution_hash)
    fi

    CURRENT_CONTRIBUTION_FILE="$CONTRIBUTIONS_PATH/${CIRCUIT_FILENAME}_${CONTRIBUTOR_NAME}.zkey"
    if [ -e "$CURRENT_CONTRIBUTION_FILE" ]; then
        echo "You've already contributed to this zk-voceremony in file $CURRENT_CONTRIBUTION_FILE"
        echo "Contributing more than once is not allowed. Aborting..."
        exit 1
    fi

    touch .lock && git add .lock && git commit .lock -m "Prevent other contributions" && git push origin $CEREMONY_BRANCH

    gh pr create --title "Contribution: from $CONTRIBUTOR_NAME to '$CEREMONY_BRANCH' ceremony" --body "" \
        --base $CEREMONY_BRANCH --draft

    git reset --hard upstream/$CEREMONY_BRANCH # discard .lock commit

    echo
    echo "Downloading artifacts..."
    git config lfs.fetchinclude "${LAST_CONTRIBUTION_FILE##./}"
    git lfs pull

    echo
    echo "
You are going to contribute to '$CEREMONY_BRANCH' zk-voceremony process!"
    echo
    echo "Thanks $CONTRIBUTOR_NAME for your contribution!"
    echo " - You are using $LAST_CONTRIBUTION_FILE as last contribution file ($HASH: $LAST_CONTRIBUTION_HASH)"
    echo " - Your contribution will be saved in $CURRENT_CONTRIBUTION_FILE file"
    echo
    echo "Now, the script will prompt to you for an random input to generate the new contribution."
    echo "This process will take a while... So, be patient and don't close the terminal until the process is finished.
    "
}

make_contribution() {
    CONTRIBUTION_RANDOM_INPUT=`ask_to_user "Please enter a random input and press enter:"`
    echo "Your part of the input is: '$CONTRIBUTION_RANDOM_INPUT'. Generating a random part..."
    CONTRIBUTION_RANDOM_INPUT="${CONTRIBUTION_RANDOM_INPUT}\n$(head -c 64 /dev/urandom | md5sum)"
    echo
    echo "The generation of the contribution will take a while... So, be patient and don't close the terminal until the process is finished."
    echo
    $SNARKJS zkc $LAST_CONTRIBUTION_FILE $CURRENT_CONTRIBUTION_FILE -e="$CONTRIBUTION_RANDOM_INPUT"
    [ $? -ne 0 ] && {
        echo; echo "Error generating contribution, please retry or ask for support"
        exit 1
    } || {
        echo; echo "Done! Your contribution generated in $CURRENT_CONTRIBUTION_FILE!"
    }
    echo
}

append_hash_to_contributions() {
    echo 
    echo "Computing your contribution hash..."
    echo

	local contribution_hash=$(get_file_hash "$1")
	local contribution_filepath=$(basename -- "$1")
	local contribution_line="$contribution_filepath:$contribution_hash"
	# calculate the target line to append the contribution hash
	total_lines=$(wc -l < "$CONTRIBUTIONS_FILE")
	contribution_target_line=$((total_lines - 6))
	last_contribution_target_line=$((total_lines))
	# create a temporary file
    temp_file=$(mktemp)
    # copy lines up to the target line to the temporary file
    head -n "$contribution_target_line" "$CONTRIBUTIONS_FILE" > "$temp_file"
    # append the new content
    echo "$contribution_line" >> "$temp_file"
    # append the remaining lines after the new content
    tail -n +$((contribution_target_line + 1)) "$CONTRIBUTIONS_FILE" >> "$temp_file"
    # replace the original file with the temporary file including the new 
	# last contribution hash
	sed "${last_contribution_target_line}s/.*/$contribution_line/" $temp_file > "$CONTRIBUTIONS_FILE"
}

publish_contribution() {
    echo 
    echo "Uploading and committing your contribution..."
    echo
    git add $CONTRIBUTIONS_FILE $CURRENT_CONTRIBUTION_FILE && \
        git commit -m "Contribution: from $CONTRIBUTOR_NAME to '$CEREMONY_BRANCH' ceremony" \
        && git push -f origin $CEREMONY_BRANCH \
        && gh pr ready
    [ $? -ne 0 ] && {
        echo; echo "Error during the contribution process, please start it over or ask for support"
        exit 1
    } || {
        echo; echo "Done! Your contribution has been published!"
    }
    echo
    echo "Last but not least, help us to get more contributors by sharing the following tweet:

'I participated in the @vocdoni zk ceremony at https://zk.vocdoni.io/ to contribute towards securing anonymous voting.'"
    echo
    echo "Thanks for your contribution! :)"
    echo
}

init_contribution() {
    intro_message
    prompt_env_inputs
    check_contribute_env
    make_contribution || error "contribution failed"
    append_hash_to_contributions "$CURRENT_CONTRIBUTION_FILE"
    publish_contribution || error "publish contribution failed"
}

init_contribution